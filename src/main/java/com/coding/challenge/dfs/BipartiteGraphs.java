package com.coding.challenge.dfs;

class BipartiteGraphs {

	BipartiteGraphs() {
		throw new AssertionError();
	}

	public static void main(String[] args) {
		final int[][] graphOne = { { 1, 2, 3 }, { 0, 2 }, { 0, 1, 3 }, { 0, 2 } };
		assert !isBipartite(graphOne);

		final int[][] graphTwo = { { 1, 3 }, { 0, 2 }, { 1, 3 }, { 0, 2 } };
		assert isBipartite(graphTwo);

		final int[][] graphThree = { { 47 }, { 48 }, { 52, 58, 62 }, { 77, 84 }, { 9, 13, 24, 73 },
				{ 15, 41, 47, 49, 55, 68, 83, 85, 88 }, { 72 }, { 10, 37, 57, 79 }, { 12, 14, 42, 58 },
				{ 4, 26, 65, 74 }, { 7, 26, 33, 37 }, { 41, 53, 83, 90 }, { 8 }, { 4, 68, 81 }, { 8, 86 },
				{ 5, 19, 51, 54, 96 }, { 39, 81 }, { 47, 74, 76 }, { 55, 60, 64, 77 }, { 15, 23, 44, 74, 88, 90, 91 },
				{ 22, 39, 57, 72 }, { 59, 77 }, { 20, 48 }, { 19, 59, 90, 92, 98 }, { 4, 84, 87 },
				{ 43, 63, 81, 90, 91, 92 }, { 9, 10, 64, 84, 91 }, { 42, 54 }, { 54, 83, 87 }, { 36, 45, 77 }, { 59 },
				{ 32, 40, 52, 57 }, { 31, 65 }, { 10, 79 }, { 35, 46, 62, 70, 89, 91 }, { 34, 70 }, { 29, 78 },
				{ 7, 10, 43, 75, 99 }, { 55, 56 }, { 16, 20, 65, 74 }, { 31, 42, 58, 63 }, { 5, 11, 45, 63 },
				{ 8, 27, 40, 65, 72, 78 }, { 25, 37 }, { 19, 53 }, { 29, 41, 66, 97 }, { 34 }, { 0, 5, 17, 59, 66, 91 },
				{ 1, 22, 81 }, { 5, 55, 64, 78, 98 }, { 68, 71 }, { 15, 52, 87, 97 }, { 2, 31, 51, 91 },
				{ 11, 44, 54, 66, 70, 74 }, { 15, 27, 28, 53 }, { 5, 18, 38, 49, 63, 83 }, { 38, 69, 75 },
				{ 7, 20, 31 }, { 2, 8, 40, 90 }, { 21, 23, 30, 47, 67, 96 }, { 18, 84 }, {}, { 2, 34 },
				{ 25, 40, 41, 55 }, { 18, 26, 49 }, { 9, 32, 39, 42 }, { 45, 47, 53, 96, 99 }, { 59, 70, 77 },
				{ 5, 13, 50 }, { 56, 83, 89, 94 }, { 34, 35, 53, 67 }, { 50, 83, 85 }, { 6, 20, 42 }, { 4, 83 },
				{ 9, 17, 19, 39, 53 }, { 37, 56 }, { 17 }, { 3, 18, 21, 29, 67, 90 }, { 36, 42, 49, 83 }, { 7, 33, 90 },
				{ 90, 91 }, { 13, 16, 25, 48, 99 }, {}, { 5, 11, 28, 55, 69, 71, 73, 78, 90 }, { 3, 24, 26, 60 },
				{ 5, 71 }, { 14 }, { 24, 28, 51 }, { 5, 19, 93 }, { 34, 69 },
				{ 11, 19, 23, 25, 58, 77, 79, 80, 83, 92 }, { 19, 25, 26, 34, 47, 52, 80 }, { 23, 25, 90 }, { 88, 95 },
				{ 69, 96 }, { 93, 99 }, { 15, 59, 66, 94 }, { 45, 51 }, { 23, 49 }, { 37, 66, 81, 95 } };
		assert !isBipartite(graphThree);
	}

	static boolean isBipartite(int[][] graph) {
		final int n = graph.length;
		final int[] s = new int[n];
		boolean b = true;
		for (int i = 0; i < n; i++) {
			if (s[i] == 0) {
				// vertex i has just been discovered.
				s[i] = 1;
				b = b && isBipartiteVisit(graph, i, s);
			}
		}
		return b;
	}

	static boolean isBipartiteVisit(int[][] graph, int u, int[] s) {
		boolean bipartite = true;
		for (int v : graph[u]) {
			if (s[v] == 0) {
				// just a flip !
				s[v] = 3 - s[u];
				// Note: short circuiting works here !
				bipartite = bipartite && isBipartiteVisit(graph, v, s);
			} else
				bipartite = bipartite && s[u] != s[v];

		}
		return bipartite;
	}
}
